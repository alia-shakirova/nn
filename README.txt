
I. File list
------------
Figures/                           scripts to generate plots
era5_grid1_data/                   Sept. 1992 and Sept. 2012 ERA5 data
NN/nn_tsr.mat                      NN model for TSR flux prediction
NN/nn_ssr.mat                      NN model for SSR flux prediction
NN/nn_toa.m                        function for the TSR prediction
NN/nn_sfc.m                        function for the SSR prediction
NN/calculate_toa_feedbacks.m       radiative feedback quantification at the TOA
NN/calculate_sfc_feedbacks.m       radiative feedback quantification at the surface
train_nn/                          scripts to train NN models

Note: the folder NN contains scripts for the shortwave radiative feedback quantification in the Arctic:
1. calculate_toa_feedbacks.m
2. calculate_sfc_feedbacks.m 
The results generated by these scripts are presented in Figure 8 and Figure S8.


II. NN design
-------------

NN model for the top net solar radiation (TSR) prediction. Input variables are:
1.  TOA incident solar radiation (W*m**-2), downward positive
2.  Total column cloud ice water (kg*m**-2) 
3.  Total column cloud liquid water (kg*m**-2)
4.  Total column water vapour (kg*m**-2)
5.  High cloud cover (0-1)
6.  Medium cloud cover (0-1)
7.  Low cloud cover (0-1)
8.  Surface pressure (Pa)
9.  Total column ozone (kg*m**-2) 
10. Forecast albedo (0-1)

Output: TSR (W*m**-2), downward positive
All variables are monthly averaged values. Radiation variable is for all-sky conditions.

III. NN training
-----------------
After training, a NN model is saved to the .mat file. This file contains maximum and minimum values for all inputs (max_x, min_x),
NN hyperparameters, weights, biases, exampleInput and exampleOutput. Input and output example could be large depending on the
training dataset and they are redundant because they do not define the NN model. Hence, they can take too much memory space so
we would like to delete them. Here is the instruction on how to delete input and output example from the .mat file.

1. Load .mat file with saved NN model:
   >> load('Net_tsr.mat')

2. Save weights and biases from the net structure:
   >> IW = net.IW;
   >> LW = net.LW;
   >> b = net.b;

3. Delete input example data from the net structure:
   >> net.input.exampleInput = [];

4. Set input range to [-1 1] for each input variable. For example, we have 10 input variables in our NN model so we set net.input.range
   to 10x2 -1 and 1 array:
   >> net.input.range = [-1 1; -1 1; -1 1; -1 1; -1 1; -1 1; -1 1; -1 1; -1 1; -1 1];

5. Save net.output.range to a matlab variable:
   >> outrange = net.output.range;

6. Delete output example from the net structure:
   >> net.output.exampleOutput = [];

7. Set output range to the saved value:
   net.output.range = outrange; 

8. Set weights and biases to preliminary saved values:
   >> net.IW = IW;
   >> net.LW = LW;
   >> net.b = b;

9. Clear workspace from all variables except net and max_x, min_x:
   >> clearvars -except net max_x min_x

10. Save NN model:
   >> save 'Net_tsr.mat'

This simple algorithm helps us to clear memory space in the NN files from redundant input and output examples. Now .mat file should take
up no more than a few KB.
 

Author: Aliia Shakirova
Date: April 26, 2021
